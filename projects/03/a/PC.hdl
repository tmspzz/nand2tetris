// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:

    Or(a=reset, b=load, out=loadOrReset);
    Or(a=loadOrReset, b=inc, out=loadOrResetOrInc);
    Mux16(a=in, b=false, sel=reset, out=inAfterResetEval);
    Inc16(in=registerOut, out=registerOutInc);
    Not(in=loadOrReset, out=notLoadOrReset);
    And(a=notLoadOrReset, b=inc, out=shouldInc);
    // shouldInc truth table
    // R L I O
    // 0 0 0 0
    // 0 0 1 1 (not R and not L) and I => not (R or L) and I
    // 0 1 0 0
    // 0 1 1 0
    // 1 0 0 0
    // 1 0 1 0
    // 1 1 0 0
    // 1 1 1 0
    Mux16(a=inAfterResetEval, b=registerOutInc, sel=shouldInc, out=inFullEval);
    Register(in=inFullEval, load=loadOrResetOrInc, out=registerOut, out=out);
}
