// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    // 000 xxx xxx xxx xxx RAM
    // 001 xxx xxx xxx xxx RAM
    // 010 xxx xxx xxx xxx RAM
    // 011 xxx xxx xxx xxx RAM
    // 100 xxx xxx xxx xxx SCREEN
    // 101 xxx xxx xxx xxx SCREEN
    // 110 xxx xxx xxx xxx KBD
    // 111 xxx xxx xxx xxx KBD

    DMux8Way(in=true, sel=address[12..14], a=r0x0FFF, b=r0x1FFF, c=r0x2FFF, d=r0x3FFF, e=s0x4FFF, f=s0x5FFF, g=k0x6FFF, h=k0x7FFF);
    Or8Way(in[0]=r0x0FFF, in[1]=r0x1FFF, in[2]=r0x2FFF, in[3]=r0x3FFF, in[4..7]=false, out=isRam);
    Or(a=s0x4FFF, b=s0x5FFF, out=isScreen);
    Or(a=k0x6FFF, b=k0x7FFF, out=isKeyboard);
    And(a=isRam, b=load, out=isRamLoad);
    And(a=isScreen, b=load, out=isScreenLoad);
    RAM16K(in=in, load=isRamLoad, address=address[0..13], out=ramOut);
    Screen(in=in, load=isScreenLoad, address=address[0..12], out=screenOut);
    Keyboard(out=keyboardOut);
    Mux8Way16(a=ramOut, b=ramOut, c=ramOut, d=ramOut, e=screenOut, f=screenOut, g=keyboardOut, h=keyboardOut, sel=address[12..14], out=out);
}