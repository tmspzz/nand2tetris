// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:


    /****** C instruction Decoding ******/
    // Instruction  template: ixxaccccccdddjjj

                       // ixxacccccc ddd jjj
    DMux8Way(in=true, sel=instruction[3..5], a=destNull, b=destM, c=destD, d=destMD, e=destA, f=destAM, g=destAD, h=destAMD); // Destination Decoding
    Or8Way(in[0]=destD, in[1]=destMD, in[2]=destAD, in[3]=destAMD, in[4..7]=false, out=destAffectsD); // Destination of C instructions is D register
    Or8Way(in[0]=destA, in[1]=destAM, in[2]=destAD, in[3]=destAMD, in[4..7]=false, out=destAffectsA); // Destination of C instructions is A register
    Or8Way(in[0]=destM, in[1]=destAM, in[2]=destMD, in[3]=destAM, in[4]=destAMD, in[5..7]=false, out=destAffectsMemory); // Destination of C instructions is Memory
                      // ixxacccccc ddd jjj
    DMux8Way(in=true, sel=instruction[0..2], a=noJMP, b=jmpGT, c=jmpEQ, d=jmpGE, e=jmpLT, f=jmpNE, g=jmpLE, h=justJMP); // Jump Decoding
    And(a=instruction[15], b=destAffectsMemory, out=writeM);
    /****** C instruction Decoding END ******/

    /****** A instruction Decoding ******/
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=destAffectsA, out=loadA);
    /****** A instruction Decoding END ******/

    /****** A Register Control ******/
    Mux16(a=aluOutFeedback, b=instruction, sel=isAInstruction, out=inARegister);
    ARegister(in=inARegister, load=loadA, out=outARegister, out=jmpAddressFromA, out[0..14]=addressM); // Register A
    /****** A Register Control END ******/

    /****** ALU Input ******/
                              // ? ixx1ccccccdddjjj the single a-bit determines whether the ALU will operate on the A register input or on the M input
    Mux16(a=outARegister, b=inM, sel=instruction[12], out=aluYIn);
    And(a=instruction[15], b=destAffectsD, out=loadD);
    DRegister(in=aluOutFeedback, load=loadD, out=aluXIn); // Register D
    /****** ALU Input END ******/
    
    /****** ALU Control ******/

                         // ixxa1cccccdddjjj   ixxac1ccccdddjjj   ixxacc1cccdddjjj   ixxaccc1ccdddjjj   ixxacccc1cdddjjj ixxaccccc1dddjjj
    ALU(x=aluXIn, y=aluYIn, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOutFeedback, out=outM, zr=isZero, ng=isNegative);
    /****** ALU Control END ******/

    /****** PC Control ******/
    Not(in=isNegative, out=isPositive);
    Or(a=isPositive, b=isZero, out=greatThanOrEqual);
    Or(a=isNegative, b=isZero, out=lessThanOrEqual);
    Not(in=isZero, out=notZero);
    And(a=isPositive, b=notZero, out=isPositiveAndNotZero);
    And(a=jmpGT, b=isPositiveAndNotZero, out=loadJPMGT);
    And(a=jmpEQ, b=isZero, out=loadJPMEQ);
    And(a=jmpGE, b=greatThanOrEqual, out=loadJMPGE);
    And(a=jmpLT, b=isNegative, out=loadJMPLT);
    And(a=jmpNE, b=notZero, out=loadJMPNE);
    And(a=jmpLE, b=lessThanOrEqual, out=loadJMPLE);

    Or8Way(in[0]=justJMP, in[1]=loadJPMGT, in[2]=loadJPMEQ, in[3]=loadJMPGE, in[4]=loadJMPLT, in[5]=loadJMPNE, in[6]=loadJMPLE, in[7]=false, out=isJMP);

    Mux16(a[0..14]=pcOut, b=false, sel=reset, out=pcFeedbackIn);
    Inc16(in=pcFeedbackIn, out=pcInc);

    And(a=instruction[15], b=isJMP, out=shouldJMPLoad);
    Mux16(a=pcInc, b=jmpAddressFromA, sel=shouldJMPLoad, out=pcIn);

    Mux16(a=pcIn, b=false, sel=reset, out=finalPCaddress);
    PC(in=finalPCaddress, load=true, out[0..14]=pcOut, out[0..14]=pc); // Program Counter
    /****** PC Control END ******/
}